package org.team537.robot.subsystems;

import org.team537.robot.RobotMap;
import org.team537.robot.commands.DriveDefault;
import org.team537.toolbox.Maths;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Drive extends Subsystem {
	private final CANTalon backLeftAngle = new CANTalon(RobotMap.CAN.DRIVE_BACK_LEFT_ANGLE);
	private final CANTalon backLeftDrive = new CANTalon(RobotMap.CAN.DRIVE_BACK_LEFT_DRIVE);

	private final CANTalon backRightAngle = new CANTalon(RobotMap.CAN.DRIVE_BACK_RIGHT_ANGLE);
	private final CANTalon backRightDrive = new CANTalon(RobotMap.CAN.DRIVE_BACK_RIGHT_DRIVE);

	private final CANTalon frontLeftAngle = new CANTalon(RobotMap.CAN.DRIVE_FRONT_LEFT_ANGLE);
	private final CANTalon frontLeftDrive = new CANTalon(RobotMap.CAN.DRIVE_FRONT_LEFT_DRIVE);

	private final CANTalon frontRightAngle = new CANTalon(RobotMap.CAN.DRIVE_FRONT_RIGHT_ANGLE);
	private final CANTalon frontRightDrive = new CANTalon(RobotMap.CAN.DRIVE_FRONT_RIGHT_DRIVE);
	
	public Drive() {
		double p = 4.0;
		double i = 0.001;
		double d = 6.0;
		backLeftAngle.setFeedbackDevice(FeedbackDevice.AnalogPot);
		backLeftAngle.changeControlMode(TalonControlMode.Position);
		backLeftAngle.setPID(p, i, d);
		backLeftDrive.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		backLeftDrive.changeControlMode(TalonControlMode.PercentVbus);

		backRightAngle.setFeedbackDevice(FeedbackDevice.AnalogPot);
		backRightAngle.changeControlMode(TalonControlMode.Position);
		backRightAngle.setPID(p, i, d);
		backRightDrive.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		backRightDrive.changeControlMode(TalonControlMode.PercentVbus);

		frontLeftAngle.setFeedbackDevice(FeedbackDevice.AnalogPot);
		frontLeftAngle.changeControlMode(TalonControlMode.Position);
		frontLeftAngle.setPID(p, i, d);
		frontLeftDrive.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		frontLeftDrive.changeControlMode(TalonControlMode.PercentVbus);

		frontRightAngle.setFeedbackDevice(FeedbackDevice.AnalogPot);
		frontRightAngle.changeControlMode(TalonControlMode.Position);
		frontRightAngle.setPID(p, i, d);
		frontRightDrive.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		frontRightDrive.changeControlMode(TalonControlMode.PercentVbus);
	}

	@Override
	protected void initDefaultCommand() {
		setDefaultCommand(new DriveDefault());
	}
	
	public void dashboard() {
		SmartDashboard.putNumber("Drive Front Left Drive", frontLeftDrive.getSpeed());
		SmartDashboard.putNumber("Drive Front Left Drive (Encoder)", frontLeftDrive.getEncPosition());
		SmartDashboard.putNumber("Drive Front Left Angle", frontLeftAngle.getAnalogInRaw());

		SmartDashboard.putNumber("Drive Front Right Drive", frontRightDrive.getSpeed());
		SmartDashboard.putNumber("Drive Front Right Drive (Encoder)", frontRightDrive.getEncPosition());
		SmartDashboard.putNumber("Drive Front Right Angle", frontRightAngle.getAnalogInRaw());

		SmartDashboard.putNumber("Drive Back Left Drive", backLeftDrive.getSpeed());
		SmartDashboard.putNumber("Drive Back Left Drive (Encoder)", backLeftDrive.getEncPosition());
		SmartDashboard.putNumber("Drive Back Left Angle", backLeftAngle.getAnalogInRaw());

		SmartDashboard.putNumber("Drive Back Right Drive", backRightDrive.getSpeed());
		SmartDashboard.putNumber("Drive Back Right Drive (Encoder)", backRightDrive.getEncPosition());
		SmartDashboard.putNumber("Drive Back Right Angle", backRightAngle.getAnalogInRaw());
	}
	
	public void drive(double forward, double strafe, double twist, double gyro) {
		SmartDashboard.putNumber("Drive Input Forward", forward);
		SmartDashboard.putNumber("Drive Input Strafe", strafe);
		SmartDashboard.putNumber("Drive Input Twist", twist);
		SmartDashboard.putNumber("Drive Input Gyro", gyro);

		// Field Orientation.
		double lastForward = forward;
		double lastStrafe = strafe;
		strafe = -lastForward * Math.sin(gyro) + lastStrafe * Math.cos(gyro);
		forward = lastForward * Math.cos(gyro) + lastStrafe * Math.sin(gyro);

		double a = strafe - twist * (RobotMap.Robot.LENGTH / RobotMap.Robot.RATIO);
		double b = strafe + twist * (RobotMap.Robot.LENGTH / RobotMap.Robot.RATIO);
		double c = forward - twist * (RobotMap.Robot.WIDTH / RobotMap.Robot.RATIO);
		double d = forward + twist * (RobotMap.Robot.WIDTH / RobotMap.Robot.RATIO);

		double speedFrontLeft = Math.sqrt((b * b) + (c * c));
		double angleFrontLeft = Math.atan2(b, c) * 180.0 / Math.PI;

		double speedFrontRight = Math.sqrt((b * b) + (d * d));
		double angleFrontRight = Math.atan2(b, d) * 180.0 / Math.PI;

		double speedBackLeft = Math.sqrt((a * a) + (d * d));
		double angleBackLeft = Math.atan2(a, d) * 180.0 / Math.PI;

		double speedBackRight = Math.sqrt((a * a) + (c * c));
		double angleBackRight = Math.atan2(a, c) * 180.0 / Math.PI;

		// Normalize wheel angles before being used.
		angleFrontLeft = Maths.normalizeAngle(angleFrontLeft);
		angleFrontRight = Maths.normalizeAngle(angleFrontRight);
		angleBackLeft = Maths.normalizeAngle(angleBackLeft);
		angleBackRight = Maths.normalizeAngle(angleBackRight);

		// Normalize wheel speeds before being used.
		double maxSpeed = speedFrontLeft;

		if (speedFrontRight > maxSpeed) {
			maxSpeed = speedFrontRight;
		}
		
		if (speedBackLeft > maxSpeed) {
			maxSpeed = speedBackLeft;
		}
		
		if (speedBackRight > maxSpeed) {
			maxSpeed = speedBackRight;
		}

		if (maxSpeed > 1.0) {
			speedFrontLeft /= maxSpeed;
			speedFrontRight /= maxSpeed;
			speedBackLeft /= maxSpeed;
			speedBackRight /= maxSpeed;
		}

	//	driveTalons(speedFrontLeft, speedFrontRight, speedBackLeft, speedBackRight);
		angleTalons(angleFrontLeft, angleFrontRight, angleBackLeft, angleBackRight);
	}
	
	private void driveTalons(double frontLeft, double frontRight, double backLeft, double backRight) {
		SmartDashboard.putNumber("Drive Front Left (Maths)", frontLeft);
		SmartDashboard.putNumber("Drive Front Right (Maths)", frontRight);
		SmartDashboard.putNumber("Drive Back Left (Maths)", backLeft);
		SmartDashboard.putNumber("Drive Back Right (Maths)", backRight);
		
	//	frontLeftDrive.set(frontLeft);
	//	frontRightDrive.set(frontRight);
	//	backLeftDrive.set(backLeft);
	//	backRightDrive.set(backRight);
	}

	private void angleTalons(double frontLeft, double frontRight, double backLeft, double backRight) {
		SmartDashboard.putNumber("Drive Angle Front Left (Maths)", frontLeft);
		SmartDashboard.putNumber("Drive Angle Front Right (Maths)", frontRight);
		SmartDashboard.putNumber("Drive Angle Back Left (Maths)", backLeft);
		SmartDashboard.putNumber("Drive Angle Back Right (Maths)", backRight);
		
		frontLeftAngle.setSetpoint(frontLeft);
	//	frontRightAngle.setSetpoint(frontRight);
	//	backLeftAngle.setSetpoint(backLeft);
	//	backRightAngle.setSetpoint(backRight);
	}
	
	public void reset() {
		frontLeftAngle.enable();
		frontLeftDrive.enable();
		frontRightAngle.enable();
		frontRightDrive.enable();
		backLeftAngle.enable();
		backLeftDrive.enable();
		backRightAngle.enable();
		backRightDrive.enable();
		
		frontLeftDrive.setPosition(0.0);
		frontRightDrive.setPosition(0.0);
		backLeftDrive.setPosition(0.0);
		backRightDrive.setPosition(0.0);
	}
	
	public void stop() {
		driveTalons(0.0, 0.0, 0.0, 0.0);
	}
}
