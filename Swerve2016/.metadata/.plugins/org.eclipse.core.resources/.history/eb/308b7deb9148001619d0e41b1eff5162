package org.team537.robot.subsystems;

import org.team537.robot.Robot;
import org.team537.robot.RobotMap;
import org.team537.robot.commands.DriveDefault;
import org.team537.toolbox.Maths;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Drive extends Subsystem {
	private final CANTalon backLeftAngle = new CANTalon(RobotMap.CAN.DRIVE_BACK_LEFT_ANGLE);
	private final CANTalon backLeftDrive = new CANTalon(RobotMap.CAN.DRIVE_BACK_LEFT_DRIVE);

	private final CANTalon backRightAngle = new CANTalon(RobotMap.CAN.DRIVE_BACK_RIGHT_ANGLE);
	private final CANTalon backRightDrive = new CANTalon(RobotMap.CAN.DRIVE_BACK_RIGHT_DRIVE);

	private final CANTalon frontLeftAngle = new CANTalon(RobotMap.CAN.DRIVE_FRONT_LEFT_ANGLE);
	private final CANTalon frontLeftDrive = new CANTalon(RobotMap.CAN.DRIVE_FRONT_LEFT_DRIVE);

	private final CANTalon frontRightAngle = new CANTalon(RobotMap.CAN.DRIVE_FRONT_RIGHT_ANGLE);
	private final CANTalon frontRightDrive = new CANTalon(RobotMap.CAN.DRIVE_FRONT_RIGHT_DRIVE);
	
	public Drive() {
		double p = 0.0;
		double i = 0.0;
		double d = 0.0;
		backLeftAngle.setFeedbackDevice(FeedbackDevice.AnalogPot);
		backLeftAngle.changeControlMode(TalonControlMode.Position);
		backLeftAngle.setPID(p, i, d);
		backLeftDrive.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		backLeftDrive.changeControlMode(TalonControlMode.PercentVbus);

		backRightAngle.setFeedbackDevice(FeedbackDevice.AnalogPot);
		backRightAngle.changeControlMode(TalonControlMode.Position);
		backRightAngle.setPID(p, i, d);
		backRightDrive.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		backRightDrive.changeControlMode(TalonControlMode.PercentVbus);

		frontLeftAngle.setFeedbackDevice(FeedbackDevice.AnalogPot);
		frontLeftAngle.changeControlMode(TalonControlMode.Position);
		frontLeftAngle.setPID(p, i, d);
		frontLeftDrive.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		frontLeftDrive.changeControlMode(TalonControlMode.PercentVbus);

		frontRightAngle.setFeedbackDevice(FeedbackDevice.AnalogPot);
		frontRightAngle.changeControlMode(TalonControlMode.Position);
		frontRightAngle.setPID(p, i, d);
		frontRightDrive.setFeedbackDevice(FeedbackDevice.QuadEncoder);
		frontRightDrive.changeControlMode(TalonControlMode.PercentVbus);
	}

	@Override
	protected void initDefaultCommand() {
		setDefaultCommand(new DriveDefault());
	}
	
	public void dashboard() {
		SmartDashboard.putNumber("Drive Front Left Drive", frontLeftDrive.getSpeed());
		SmartDashboard.putNumber("Drive Front Left Drive (Encoder)", frontLeftDrive.getEncPosition());
		SmartDashboard.putNumber("Drive Front Left Angle", frontLeftAngle.getAnalogInRaw());

		SmartDashboard.putNumber("Drive Front Right Drive", frontRightDrive.getSpeed());
		SmartDashboard.putNumber("Drive Front Right Drive (Encoder)", frontRightDrive.getEncPosition());
		SmartDashboard.putNumber("Drive Front Right Angle", frontRightAngle.getAnalogInRaw());

		SmartDashboard.putNumber("Drive Back Left Drive", backLeftDrive.getSpeed());
		SmartDashboard.putNumber("Drive Back Left Drive (Encoder)", backLeftDrive.getEncPosition());
		SmartDashboard.putNumber("Drive Back Left Angle", backLeftAngle.getAnalogInRaw());

		SmartDashboard.putNumber("Drive Back Right Drive", backRightDrive.getSpeed());
		SmartDashboard.putNumber("Drive Back Right Drive (Encoder)", backRightDrive.getEncPosition());
		SmartDashboard.putNumber("Drive Back Right Angle", backRightAngle.getAnalogInRaw());
	}
	
	public void drive(double rotation, double strafe, double forward, double gyro) {
		SmartDashboard.putNumber("Drive Input Rotation", rotation);
		SmartDashboard.putNumber("Drive Input Strafe", strafe);
		SmartDashboard.putNumber("Drive Input Forward", forward);
		SmartDashboard.putNumber("Drive Input Gyro", gyro);

	//	driveTalons(0.0, 0.0, 0.0, 0.0);
		angleTalons(0.0, 0.0, 0.0, 0.0);
	}
	
	private void driveTalons(double frontLeft, double frontRight, double backLeft, double backRight) {
		SmartDashboard.putNumber("Drive Front Left (Maths)", frontLeft);
		SmartDashboard.putNumber("Drive Front Right (Maths)", frontRight);
		SmartDashboard.putNumber("Drive Back Left (Maths)", backLeft);
		SmartDashboard.putNumber("Drive Back Right (Maths)", backRight);
		
		frontLeftDrive.set(frontLeft);
	//	frontRightDrive.set(frontRight);
	//	backLeftDrive.set(backLeft);
	//	backRightDrive.set(backRight);
	}

	private void angleTalons(double frontLeft, double frontRight, double backLeft, double backRight) {
		SmartDashboard.putNumber("Drive Angle Front Left (Maths)", frontLeft);
		SmartDashboard.putNumber("Drive Angle Front Right (Maths)", frontRight);
		SmartDashboard.putNumber("Drive Angle Back Left (Maths)", backLeft);
		SmartDashboard.putNumber("Drive Angle Back Right (Maths)", backRight);
		
		frontLeftAngle.setSetpoint(frontLeft);
	//	frontRightAngle.setSetpoint(frontRight);
	//	backLeftAngle.setSetpoint(backLeft);
	//	backRightAngle.setSetpoint(backRight);
	}
	
	public void reset() {
		Robot.ahrs.reset();
	}
	
	public void stop() {
		driveTalons(0.0, 0.0, 0.0, 0.0);
	}
	
	public static class DriveModule {
		private String name;
		private CANTalon angle;
		private CANTalon drive;
		
		public DriveModule(String name, CANTalon angle, CANTalon drive, double p, double i, double d) {
			this.name = name;
			this.angle = angle;
			this.drive = drive;

			this.angle.setFeedbackDevice(FeedbackDevice.AnalogPot);
			this.angle.changeControlMode(TalonControlMode.Position);
			this.angle.setPID(p, i, d);
			
			this.drive.setFeedbackDevice(FeedbackDevice.QuadEncoder);
			this.drive.changeControlMode(TalonControlMode.PercentVbus);
		}
		
		public void set(double speed, double angle) {
			SmartDashboard.putNumber(name + " Maths Speed", speed);
			SmartDashboard.putNumber(name + " Maths Angle", angle);

			this.angle.set((angle + 180.0) * (1024.0 / 360.0));
			this.drive.set(speed * 12.0);
		}
		
		public void dashboard() {
			SmartDashboard.putNumber(name + " Drive Speed", drive.getSpeed());
			SmartDashboard.putNumber(name + " Drive (Encoder)", drive.getEncPosition());
			SmartDashboard.putNumber(name + " Angle", angle.getAnalogInRaw());
		}
		
		public void reset() {
			angle.enable();
			drive.enable();

			drive.setPosition(0.0);
		}
		
		public void stop() {
			drive.set(0.0);
		}
	}
}
