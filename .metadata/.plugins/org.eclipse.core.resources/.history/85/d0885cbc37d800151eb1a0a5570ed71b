#ifndef SHOOTER_HPP
#define SHOOTER_HPP

#include <Schematic.hpp>
#include <DriveTrain/DriveTrain.hpp>
#include <Toolbox/RobotButton.hpp>
#include <Vision/Vision.hpp>

class Shooter: public IComponent
{
    private:
        Vision *vision;
        DriveTrain *drive;

        CANTalon *spinTalonMaster, *spinTalon2;
        Solenoid *extendSolenoid;

        Timer *extendTimer;

        RobotButton *autoShootButton, *manualAimButton, *manualShootButton;
        float spinSpeed;

    public:
        enum ShooterState
        {
            NONE, AIMING_SPINNING, FIRE
        };

        ShooterState state;

        Shooter(Joystick* joystickPrimary, Joystick* joystickSecondary, Vision *vision, DriveTrain *drive) :
                IComponent(joystickPrimary, joystickSecondary, new string("Shooter"))
        {
            this->vision = vision;
            this->drive = drive;

            spinTalonMaster = new CANTalon(8);
            spinTalonMaster->SetControlMode(CANTalon::ControlMode::kPercentVbus);
            spinTalonMaster->SetFeedbackDevice(CANTalon::FeedbackDevice::QuadEncoder);
            spinTalonMaster->Enable();

            spinTalon2 = new CANTalon(9);
            spinTalon2->SetControlMode(CANTalon::ControlMode::kFollower);
            spinTalon2->Set(8);
            spinTalon2->Enable();

            extendSolenoid = new Solenoid(5);

            extendTimer = new Timer();

            state = ShooterState::NONE;

            autoShootButton = new RobotButton(joystickPrimary, JOYSTICK_TRIGGER_LEFT);
            manualAimButton = new RobotButton(joystickSecondary, JOYSTICK_TRIGGER_LEFT);
            manualShootButton = new RobotButton(joystickSecondary, JOYSTICK_TRIGGER_RIGHT);
            spinSpeed = 0.0f;
        }

        void Update(bool teleop);
        void Dashboard();

        bool IsActivated();
};

#endif
