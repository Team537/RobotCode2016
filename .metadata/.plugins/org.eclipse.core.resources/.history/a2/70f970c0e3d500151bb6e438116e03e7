#include <DriveTrain/DriveTrain.hpp>

void DriveTrain::Update(bool teleop)
{
    float output;
    //float target;
    float speedMultiplier;

    switch (state)
    {
        case (DriveState::AUTO_ANGLE):
            output = 0;
            leftSpeedCurrent = (output > 0) ? fabs(output) : -fabs(output);
            rightSpeedCurrent = (output > 0) ? -fabs(output) : fabs(output);

            if (IsAtAngle() || distUntoggle->WasDown()) // || teleop
            {
                SetState(DriveState::NONE);
            }
            break;
        case (DriveState::AUTO_DISTANCE):
            if (IsAtDistance() || distUntoggle->WasDown()) // || teleop
            {
                SetState(DriveState::NONE);
            }
            return;
        case (DriveState::CROSSING):
            leftSpeedCurrent = 0.1f;
            rightSpeedCurrent = 0.1f;

            // Set the talon speeds.
            rightDrive1->Set(-rightSpeedCurrent);
            leftDrive4->Set(leftSpeedCurrent);

            if (distUntoggle->WasDown())
            {
                SetState(DriveState::NONE);
            }
            break;
        case (DriveState::TELEOP_CONTROL):
            leftSpeedCurrent = joystick->GetRawAxis(JOYSTICK_AXIS_LEFT_Y);
            rightSpeedCurrent = joystick->GetRawAxis(JOYSTICK_AXIS_RIGHT_Y);

            // Deadband
            if (fabs(leftSpeedCurrent) < CONTROLLER_DEADBAND)
            {
                leftSpeedCurrent = 0;
            }

            if (fabs(rightSpeedCurrent) < CONTROLLER_DEADBAND)
            {
                rightSpeedCurrent = 0;
            }

            speedMultiplier = (rockWallToggle->GetState() ? DRIVE_SPEED_ROCK_WALL : roughTerrainToggle->GetState() ? DRIVE_SPEED_ROUGH_TERRAIN : 1.0f);
            leftSpeedCurrent *= DRIVE_SPEED_MULTIPLIER * speedMultiplier;
            rightSpeedCurrent *= DRIVE_SPEED_MULTIPLIER * speedMultiplier;

            if (shiftLow->WasDown())
            {
                Shift(false);
            }
            else if (shiftHigh->WasDown())
            {
                Shift(true);
            }

            if (distanceToggle->WasDown())
            {
                AutoDistance(5 * 12.0f);
            }
            else
            {
                // Set the talon speeds.
                rightDrive1->Set(-rightSpeedCurrent);
                leftDrive4->Set(leftSpeedCurrent);
            }
            break;
        case (DriveState::TELEOP_SHOOT):
            output = 0;
            leftSpeedCurrent = (output > 0) ? fabs(output) : -fabs(output);
            rightSpeedCurrent = (output > 0) ? -fabs(output) : fabs(output);
            break;
        case (DriveState::NONE):
            if (teleop)
            {
                SetState(DriveState::TELEOP_CONTROL);
            }
            break;
    }
}

void DriveTrain::Dashboard()
{
    SmartDashboard::PutNumber("Drive Speed Left", leftSpeedCurrent);
    SmartDashboard::PutNumber("Drive Speed Right", rightSpeedCurrent);
    SmartDashboard::PutBoolean("Drive High Gear", shifter->Get());

    SmartDashboard::PutNumber("Drive Right Setpoint", rightDrive1->GetSetpoint());
    SmartDashboard::PutNumber("Drive Left Setpoint", leftDrive4->GetSetpoint());

    SmartDashboard::PutNumber("Drive Right Encoder", -rightDrive1->GetEncPosition());
    SmartDashboard::PutNumber("Drive Left Encoder", leftDrive4->GetEncPosition());
    SmartDashboard::PutNumber("Drive Right Encoder Numbers", -rightDrive1->GetEncPosition());
    SmartDashboard::PutNumber("Drive Left Encoder Numbers", leftDrive4->GetEncPosition());

    SmartDashboard::PutNumber("Drive Draw Average", GetCurrentDraw());

    SmartDashboard::PutString("Drive State", state == TELEOP_SHOOT ? "Teleop Shooter" : state == AUTO_ANGLE ? "Auto Angle" : state == AUTO_DISTANCE ? "Auto Distance" : state == TELEOP_CONTROL ? "Teleop Control" : "None");
}

void DriveTrain::SetState(DriveState driveState)
{
    state = driveState;

    if (state == DriveState::AUTO_DISTANCE || state == DriveState::TELEOP_SHOOT)
    {
        rightDrive1->SetControlMode(CANTalon::ControlMode::kPosition);
        leftDrive4->SetControlMode(CANTalon::ControlMode::kPosition);
        rightDrive1->SetPID(0.085f, 0.0f, 0.0f);
        leftDrive4->SetPID(0.085f, 0.0f, 0.0f);
    }
    else if (state == DriveState::CROSSING)
    {
        rightDrive1->SetControlMode(CANTalon::ControlMode::kSpeed);
        leftDrive4->SetControlMode(CANTalon::ControlMode::kSpeed);
    }
    else
    {
        rightDrive1->SetControlMode(CANTalon::ControlMode::kPercentVbus);
        leftDrive4->SetControlMode(CANTalon::ControlMode::kPercentVbus);
    }

    rightDrive1->Enable();
    leftDrive4->Enable();

    rightDrive1->SetPosition(0);
    leftDrive4->SetPosition(0);

    if (state == DriveState::AUTO_ANGLE || state == DriveState::AUTO_DISTANCE || state == DriveState::CROSSING)
    {
        Shift(false);
    }
}

void DriveTrain::Shift(bool highGear)
{
    shifter->Set(highGear);
}

void DriveTrain::AutoAngle(float angleDegrees)
{
    SetState(DriveState::AUTO_ANGLE);
    // TODO
}

void DriveTrain::AutoDistance(int distanceIn)
{
    SetState(DriveState::AUTO_DISTANCE);
    driveDistance = round(distanceIn * DRIVE_FT_TO_ENCODER);

    rightDrive1->Set(driveDistance);
    leftDrive4->Set(-driveDistance);
}

bool DriveTrain::IsWaiting()
{
    return state == DriveState::NONE;
}

bool DriveTrain::IsAtAngle()
{
    return true; // TODO
}

bool DriveTrain::IsAtDistance()
{
    return false; // TODO
}

float DriveTrain::GetCurrentDraw()
{
    return (rightDrive1->GetOutputCurrent() + rightDrive2->GetOutputCurrent() + rightDrive3->GetOutputCurrent() + leftDrive4->GetOutputCurrent() + leftDrive5->GetOutputCurrent() + leftDrive6->GetOutputCurrent()) / 6.0f;
}
