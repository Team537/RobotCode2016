#include <DriveTrain/DriveTrain.hpp>

void DriveTrain::Update(bool teleop)
{
	switch (state)
	{
		case (ANGLE_PID):
			anglePID->Enable();
			// anglePIDSource->SetPIDTarget(target);
			anglePID->SetSetpoint(0);

			output = anglePIDOutput->GetOutput();

			leftSpeedCurrent = (output > 0) ? fabs(output) : -fabs(output);
			rightSpeedCurrent = (output > 0) ? -fabs(output) : fabs(output);

			if (OnTargetAngle())
			{
				ChangeState(DriveState::NONE);
			}
			break;
		case (DRIVE_ENC):
			leftSpeedCurrent = leftDrive4->GetSpeed();
			rightSpeedCurrent = rightDrive1->GetSpeed();

			if (OnTargetDistance())
			{
				ChangeState(DriveState::NONE);
			}

			break;
		case (DriveState::SHOOTER_TEL):
			/*target = (vision->GetGoalCenterX() / WEBCAM_PIXEL_WIDTH) * 2 - 1;
			anglePID->Enable();
			anglePIDSource->SetPIDTarget(target);
			anglePID->SetSetpoint(0);

			output = anglePIDOutput->GetOutput();

			leftSpeedCurrent = (output > 0) ? fabs(output) : -fabs(output);
			rightSpeedCurrent = (output > 0) ? -fabs(output) : fabs(output);

			if (OnTargetAngle())
			{
				ChangeState(DriveState::CONTROL_TEL);
			}*/

			ChangeState(DriveState::CONTROL_TEL);

			break;
		case (DriveState::CONTROL_TEL):
			leftSpeedCurrent = joystick->GetRawAxis(JOYSTICK_AXIS_LEFT_Y);
			rightSpeedCurrent = joystick->GetRawAxis(3);

			if (shiftLow->WasDown())
			{
				Shift(false);
			}
			else if (shiftHigh->WasDown())
			{
				Shift(true);
			}

			if (toggleSanic->WasDown())
			{
				sanicFast = !sanicFast;
			}

			break;
		case (DriveState::NONE):
			if (teleop)
			{
				state = DriveState::CONTROL_TEL;
			}

			break;
	}

	// Deadband
	if (fabs(leftSpeedCurrent) < JOYSTICK_DEADBAND)
	{
		leftSpeedCurrent = 0;
	}

	if (fabs(rightSpeedCurrent) < JOYSTICK_DEADBAND)
	{
		rightSpeedCurrent = 0;
	}

	// Ramping.
	leftSpeedDelta = leftSpeedCurrent - leftSpeedOld;
	leftSpeedDelta = rightSpeedCurrent - rightSpeedOld;
	leftDriveSign = leftSpeedCurrent / fabs(leftSpeedCurrent);
	rightDriveSign = rightSpeedCurrent / fabs(rightSpeedCurrent);

	if (fabs(leftSpeedDelta) > DRIVE_RAMP_SPEED)
	{
		leftSpeedCurrent = leftSpeedOld + leftDriveSign * DRIVE_RAMP_SPEED;
	}

	if (fabs(rightSpeedDelta) > DRIVE_RAMP_SPEED)
	{
		rightSpeedCurrent = rightSpeedOld + rightDriveSign * DRIVE_RAMP_SPEED;
	}

	leftSpeedCurrent *= DRIVE_SPEED_MULTIPLIER * (sanicFast ? 1.0 : 0.5);
	rightSpeedCurrent *= DRIVE_SPEED_MULTIPLIER * (sanicFast ? 1.0 : 0.5);

	// Clamping.
	if (fabs(leftSpeedCurrent) > 1)
	{
		leftSpeedCurrent = leftDriveSign;
	}

	if (fabs(rightSpeedCurrent) > 1)
	{
		rightSpeedCurrent = rightDriveSign;
	}

	// Log the left and right speeds.
	leftSpeedOld = leftSpeedCurrent;
	rightSpeedOld = rightSpeedCurrent;

	// Set the talons.
	rightDrive1->Set(-rightSpeedCurrent);
	leftDrive4->Set(leftSpeedCurrent);
}

void DriveTrain::Dashboard()
{
	SmartDashboard::PutNumber("Drive Speed Left", leftSpeedCurrent);
	SmartDashboard::PutNumber("Drive Speed Right", rightSpeedCurrent);
	SmartDashboard::PutBoolean("Drive In High Gear", shifter->Get());

	SmartDashboard::PutNumber("Drive Angle Target", anglePIDSource->PIDGet());
	SmartDashboard::PutBoolean("Drive Angle On Target", OnTargetAngle());

	SmartDashboard::PutBoolean("Drive Encoder Right", rightDrive1->GetAnalogInRaw());
	SmartDashboard::PutBoolean("Drive Encoder Left", leftDrive4->GetAnalogInRaw());

	SmartDashboard::PutBoolean("Drive Distance Encoder Target", encoderGoal);
	SmartDashboard::PutBoolean("Drive Distance On Target", OnTargetDistance());
}

void DriveTrain::ChangeState(DriveState newState)
{
	state = newState;

	switch(state)
	{
		case(DriveState::SHOOTER_TEL):
		case(DriveState::ANGLE_PID):
			anglePID->Enable();
			rightDrive1->SetControlMode(CANTalon::ControlMode::kPosition);
			leftDrive4->SetControlMode(CANTalon::ControlMode::kPosition);
			break;
		case(DriveState::DRIVE_ENC):
			anglePID->Disable();
			rightDrive1->SetControlMode(CANTalon::ControlMode::kSpeed);
			leftDrive4->SetControlMode(CANTalon::ControlMode::kSpeed);
			break;
		case(DriveState::CONTROL_TEL):
			anglePID->Disable();
			rightDrive1->SetControlMode(CANTalon::ControlMode::kPosition);
			leftDrive4->SetControlMode(CANTalon::ControlMode::kPosition);
			break;
		case(DriveState::NONE):
			break;
	}
}

void DriveTrain::AutoDrive(float distanceFt)
{
	ChangeState(DRIVE_ENC);
	encoderGoal = distanceFt * DRIVE_FT_TO_ENCODER;

	leftDrive4->Reset();
	rightDrive1->Reset();

	leftDrive4->Set(encoderGoal);
	rightDrive1->Set(encoderGoal);
}

void DriveTrain::AutoAngle(float targetAngle)
{
	ChangeState(ANGLE_PID);
	double target = ((angleGyro->GetAngle() - targetAngle) * (1.0f / 360.0f)) * 2 - 1; // TODO: Check!
	anglePIDSource->SetPIDTarget(target);
}

void DriveTrain::Shift(bool highGear)
{
	shifter->Set(highGear);
}

bool DriveTrain::IsWaiting()
{
	return state == DriveState::NONE;
}

bool DriveTrain::OnTargetAngle()
{
	return anglePID->IsEnabled() && anglePID->OnTarget();
}

bool DriveTrain::OnTargetDistance()
{
	return (fabs(leftDrive4->GetEncPosition() - encoderGoal) < DRIVE_DISTANCE_ERROR) && (fabs(rightDrive1->GetEncPosition() - encoderGoal) < DRIVE_DISTANCE_ERROR);
}
