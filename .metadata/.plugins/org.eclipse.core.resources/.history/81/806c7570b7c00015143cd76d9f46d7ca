#include "ShooterVision.hpp"

void ShooterVision::Update() {
	/** Area */
	llvm::ArrayRef<double> areaData = goalImageTable->GetNumberArray("area", llvm::ArrayRef<double>());
	unsigned int pointer = 0;

	for (int i = 0; i < areaData.Size(); i++) {
		if (areaData[i] > areaData[pointer]) {
			pointer = i;
		}
	}

	/** Center X */
	llvm::ArrayRef<double> centerXData = goalImageTable->GetNumberArray("centerX", llvm::ArrayRef<double>());

	if (!centerXData.empty()) {
		goalCenterX = centerXData[pointer];
	} else {
		goalCenterX = -1;
	}

	/** Width */
	llvm::ArrayRef<double> widthData = goalImageTable->GetNumberArray("width", llvm::ArrayRef<double>());

	if (!widthData.empty()) {
		goalWidth = widthData[pointer];
	} else {
		goalWidth = -1;
	}

	/** Height */
	llvm::ArrayRef<double> heightData = goalImageTable->GetNumberArray("height", llvm::ArrayRef<double>());

	if (!heightData.empty()) {
		goalHeight = heightData[pointer];
	} else {
		goalHeight = -1;
	}

	/** Calculate Distance */
	goalDistance = ((GOAL_WIDTH / 12) * WEBCAM_PIXEL_WIDTH) / (2 * GetGoalWidth() * TAN_FOV); // Goal width / 12 inches in a foot.
}

void ShooterVision::Dashboard() {
	SmartDashboard::PutNumber("X Offset (px)", GetGoalXOffset());
	SmartDashboard::PutNumber("Goal Height (px)", GetGoalHeight());
	SmartDashboard::PutNumber("Goal Width (px)", GetGoalWidth());
	SmartDashboard::PutNumber("Target Distance (ft)", GetGoalDistance());
}

double ShooterVision::GetGoalXOffset() {
	return goalCenterX;
}

double ShooterVision::GetGoalWidth() {
	return goalWidth;
}

double ShooterVision::GetGoalHeight() {
	return goalHeight;
}

double ShooterVision::GetGoalDistance() {
	return goalDistance;
}
