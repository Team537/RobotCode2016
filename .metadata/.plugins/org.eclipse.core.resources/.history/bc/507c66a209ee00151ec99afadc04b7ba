#ifndef SHOOTER_HPP
#define SHOOTER_HPP

#include <Schematic.hpp>
#include <DriveTrain/DriveTrain.hpp>
#include <Toolbox/RobotButton.hpp>
#include <Vision/Vision.hpp>

class Shooter: public IComponent
{
    private:
        Vision *vision;
        DriveTrain *drive;

        CANTalon *talon1, *talon2;
        Solenoid *extendSolenoid;

        Timer *extendTimer;
        float spinSpeed, manualSpeed;
        bool autoAdvance;

        RobotButton *gotoNoneButton0, *autoShootButton, *manualAimButton, *manualFireButton, *manualRetractButton, *manualOnButton, *speedUpButton, *speedDownButton, *manualOffButton;

    public:
        enum ShooterState
        {
            NONE, AIMING, SPINNING, FIRE, MANUAL
        };

        ShooterState state;

        Shooter(Joystick* joystickPrimary, Joystick* joystickSecondary, Vision *vision, DriveTrain *drive) :
                IComponent(joystickPrimary, joystickSecondary, new string("Shooter")),
                vision(vision),
                drive(drive),
                talon1(new CANTalon(7)),
                talon2(new CANTalon(8))
        {
            talon1->SetControlMode(CANTalon::ControlMode::kSpeed);
            talon1->SetFeedbackDevice(CANTalon::FeedbackDevice::QuadEncoder);
            talon1->SetVoltageRampRate(32.0f);
            talon1->Enable();

            talon2->SetControlMode(CANTalon::ControlMode::kFollower);//kSpeed);
            //talon2->SetFeedbackDevice(CANTalon::FeedbackDevice::QuadEncoder);
            talon2->SetVoltageRampRate(32.0f);
            talon2->Enable();
            talon2->Set(7);
        }

        void Update(bool teleop);
        void Dashboard();

        void SetState(ShooterState shooterState);
        void AutoShoot();

        bool IsActivated();
};

#endif
