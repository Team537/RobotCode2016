#ifndef DRIVETRAIN_HPP
#define DRIVETRAIN_HPP

#include <Schematic.hpp>
#include <DriveTrain/DrivePIDOutput.hpp>
#include <DriveTrain/DrivePIDSource.hpp>
#include <Toolbox/RobotButton.hpp>
#include <Vision/Vision.hpp>

class DriveTrain: public IComponent
{
	enum DriveState
	{
		NONE, ANGLE_PID, DRIVE_ENC, SHOOTER_TEL, CONTROL_TEL
	};

private:
	CANTalon* rightDrive1, *rightDrive2, *rightDrive3;
	CANTalon* leftDrive4, *leftDrive5, *leftDrive6;

	RobotButton *shiftHigh, *shiftLow, *toggleSanic;

	Solenoid* shifter;
	AnalogGyro* angleGyro;

	// Vision* vision;

	DrivePIDSource* anglePIDSource;
	DrivePIDOutput* anglePIDOutput;
	PIDController* anglePID;

	float encoderGoal;

	DriveState state;
	bool sanicFast;

	float leftSpeedCurrent;
	float rightSpeedCurrent;
	float leftSpeedOld;
	float rightSpeedOld;
	float leftSpeedDelta;
	float rightSpeedDelta;
	float leftDriveSign;
	float rightDriveSign;

	double output;
	double target;

public:
	DriveTrain(Joystick* joystick, AnalogGyro* gyro) : IComponent(joystick, new string("DriveTrain")) //, Vision* visionTracking
	{
		rightDrive1 = new CANTalon(1);
		rightDrive1->SetControlMode(CANTalon::ControlMode::kPercentVbus);
		rightDrive1->SetFeedbackDevice(CANTalon::FeedbackDevice::QuadEncoder);
		rightDrive1->EnableControl();

		rightDrive2 = new CANTalon(2);
		rightDrive2->SetControlMode(CANTalon::ControlMode::kFollower);
		rightDrive2->EnableControl();
		rightDrive2->Set(1);

		rightDrive3 = new CANTalon(3);
		rightDrive3->SetControlMode(CANTalon::ControlMode::kFollower);
		rightDrive3->EnableControl();
		rightDrive3->Set(1);

		leftDrive4 = new CANTalon(4);
		leftDrive4->SetControlMode(CANTalon::ControlMode::kPercentVbus);
		leftDrive4->SetFeedbackDevice(CANTalon::FeedbackDevice::QuadEncoder);
		leftDrive4->EnableControl();

		leftDrive5 = new CANTalon(5);
		leftDrive5->SetControlMode(CANTalon::ControlMode::kFollower);
		leftDrive5->EnableControl();
		leftDrive5->Set(4);

		leftDrive6 = new CANTalon(6);
		leftDrive6->SetControlMode(CANTalon::ControlMode::kFollower);
		leftDrive6->EnableControl();
		leftDrive6->Set(4);

		shiftLow = new RobotButton(joystick, 5);
		shiftHigh = new RobotButton(joystick, 6);
		toggleSanic = new RobotButton(joystick, 10);

		shifter = new Solenoid(DRIVE_SHIFTER);
		angleGyro = gyro;
		// vision = visionTracking;

		anglePIDSource = new DrivePIDSource();
		anglePIDOutput = new DrivePIDOutput();
		anglePID = new PIDController(1, 0, 0, anglePIDSource, anglePIDOutput);
		anglePID->SetAbsoluteTolerance(DRIVE_ANGLE_TOLERENCE);
		anglePID->Disable();

		encoderGoal = 0;

		ChangeState(DriveState::NONE);
		sanicFast = true;

		leftSpeedCurrent = 0;
		rightSpeedCurrent = 0;
		leftSpeedOld = 0;
		rightSpeedOld = 0;
		leftSpeedDelta = 0;
		rightSpeedDelta = 0;
		leftDriveSign = 1;
		rightDriveSign = 1;
		target = 0;
		output = 0;
	}

	void Update(bool teleop);
	void Dashboard();

	void ChangeState(DriveState newState);
	void ChangeTalon(CANTalon *talon);
	void AutoDrive(float distanceFt);
	void AutoAngle(float targetAngle);
	void Shift(bool highGear);

	bool IsWaiting();
	bool OnTargetAngle();
	bool OnTargetDistance();
};

#endif
